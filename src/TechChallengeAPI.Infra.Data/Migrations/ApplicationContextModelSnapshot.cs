// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechChallenge.Infra.Data.Context;

#nullable disable

namespace TechChallenge.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechChallenge.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.CustomerVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerVehicle", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            PersonId = 2,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ParkingSpot", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A1",
                            Status = true
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Document = "12345678",
                            Name = "admin",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Document = "134567890",
                            Name = "cliente",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Document = "199999990",
                            Name = "valet",
                            Status = 1
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerVehicleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Entrance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("ParkingSpotId")
                        .HasColumnType("int");

                    b.Property<int>("TimeParked")
                        .HasColumnType("int");

                    b.Property<int>("ValetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerVehicleId");

                    b.HasIndex("ParkingSpotId");

                    b.HasIndex("ValetId");

                    b.ToTable("Reservation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerVehicleId = 1,
                            Entrance = new DateTime(2023, 10, 24, 16, 3, 0, 772, DateTimeKind.Local).AddTicks(5562),
                            Finished = false,
                            Paid = false,
                            ParkingSpotId = 1,
                            TimeParked = 0,
                            ValetId = 1
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlterDate = new DateTime(2023, 10, 24, 16, 3, 0, 648, DateTimeKind.Local).AddTicks(5135),
                            CreateDate = new DateTime(2023, 10, 24, 16, 3, 0, 648, DateTimeKind.Local).AddTicks(5124),
                            Description = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AlterDate = new DateTime(2023, 10, 24, 16, 3, 0, 648, DateTimeKind.Local).AddTicks(5136),
                            CreateDate = new DateTime(2023, 10, 24, 16, 3, 0, 648, DateTimeKind.Local).AddTicks(5136),
                            Description = "Employee"
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.RoleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Route");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAccess", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            Route = "Auth/RefreshToken"
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 1,
                            Route = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 1,
                            Route = "CustomerVehicle"
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 1,
                            Route = "ParkingSpot"
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 1,
                            Route = "Reservation"
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 1,
                            Route = "Role"
                        },
                        new
                        {
                            Id = 7,
                            RoleId = 1,
                            Route = "User"
                        },
                        new
                        {
                            Id = 8,
                            RoleId = 1,
                            Route = "UserRole"
                        },
                        new
                        {
                            Id = 9,
                            RoleId = 1,
                            Route = "Valet"
                        },
                        new
                        {
                            Id = 10,
                            RoleId = 1,
                            Route = "Vehicle"
                        },
                        new
                        {
                            Id = 11,
                            RoleId = 2,
                            Route = "Customer"
                        },
                        new
                        {
                            Id = 12,
                            RoleId = 2,
                            Route = "Reservation"
                        },
                        new
                        {
                            Id = 13,
                            RoleId = 2,
                            Route = "Vehicle"
                        },
                        new
                        {
                            Id = 14,
                            RoleId = 2,
                            Route = "Auth/RefreshToken"
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("PasswordHash");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "$2a$11$h7ziM.WNMBYLxApS84Z1gOeiHBu93DfogkPzv96sDbB8.Vu87vYQ.",
                            PersonId = 1,
                            RefreshTokenExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Valet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CNH")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("UserId");

                    b.Property<DateTime?>("CNHExpiration")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("RoleId");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Valet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CNH = "98765432",
                            CNHExpiration = new DateTime(2026, 10, 24, 16, 3, 0, 772, DateTimeKind.Local).AddTicks(5510),
                            PersonId = 3
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Toyota",
                            LicensePlate = "ABC123",
                            Model = "Corola",
                            VehicleType = 1
                        });
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Customer", b =>
                {
                    b.HasOne("TechChallenge.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("TechChallenge.Domain.Entities.CustomerVehicle", "CustomerVehicle")
                        .WithMany()
                        .HasForeignKey("CustomerVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechChallenge.Domain.Entities.ParkingSpot", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ParkingSpotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechChallenge.Domain.Entities.Valet", "Valet")
                        .WithMany()
                        .HasForeignKey("ValetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerVehicle");

                    b.Navigation("Valet");
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.RoleAccess", b =>
                {
                    b.HasOne("TechChallenge.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.User", b =>
                {
                    b.HasOne("TechChallenge.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TechChallenge.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechChallenge.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.Valet", b =>
                {
                    b.HasOne("TechChallenge.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TechChallenge.Domain.Entities.ParkingSpot", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
